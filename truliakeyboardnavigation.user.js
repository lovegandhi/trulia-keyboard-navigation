// Generated by CoffeeScript 1.6.3
/*
// ==UserScript==
// @name           Trulia Keyboard Navigation
// @author         Taulant Dhami
// @version        0.3
// @description    Adds some keyboard accessibility to Trulia.
// @include        http://www.trulia.com/*
//  used for Chrome
// @match          http://www.trulia.com/*
// ==/UserScript==
*/


(function() {
  var withJquery;

  withJquery = function(func) {
    var fragment, myDoc, script;
    myDoc = document;
    fragment = myDoc.createDocumentFragment();
    script = myDoc.createElement("script");
    script.type = "text/javascript";
    script.textContent = "(" + (func.toString()) + ")(jQuery)";
    fragment.appendChild(script);
    myDoc.body.appendChild(fragment);
  };

  withJquery(function($) {
    var TruliaKeyboard, totalRows, _tk;
    TruliaKeyboard = {
      localStorage: {
        get: function(key) {
          return localStorage.getItem(key);
        },
        set: function(key, value) {
          localStorage.setItem(key, value);
        }
      },
      sessionStorage: {
        get: function(key) {
          return sessionStorage.getItem(key);
        },
        set: function(key, value) {
          sessionStorage.setItem(key, parseInt(value, 10));
        }
      },
      ui: {
        resultsEl: '#result_list',
        nextPageEl: '#paging_next',
        closeWindowEl: '#iw_close',
        previousPhotoEl: '.ss_prev',
        nextPhotoEl: '.ss_next',
        dislikeEl: '.dislike',
        saveHomeEl: '.property_action_follow',
        addressEl: '.infowindow_address',
        pricingBoxEl: '.infowindow_pricing',
        infoBoxEl: '.infowindow_box'
      },
      state: {
        stateRowId: "rowId",
        stateTotalRows: "totalRows",
        setRow: function(value) {
          TruliaKeyboard.sessionStorage.set(this.stateRowId, parseInt(value, 10));
        },
        getRow: function() {
          return TruliaKeyboard.sessionStorage.get(this.stateRowId);
        },
        setTotalRows: function(value) {
          TruliaKeyboard.sessionStorage.set(this.stateTotalRows, parseInt(value, 10));
        },
        getTotalRows: function() {
          return TruliaKeyboard.sessionStorage.get(this.stateTotalRows);
        }
      },
      helper: {
        fireKeydownEvent: function(key) {
          var event;
          event = $.Event('keydown');
          event.keyCode = key;
          $(document).trigger(event);
        },
        propertyId: function() {
          var row;
          row = TruliaKeyboard.state.getRow();
          return $(TruliaKeyboard.ui.resultsEl).children()[row > 1 ? row - 1 : row].attributes['data-property-id'].value;
        },
        propertyUrl: function() {
          return "http://www.trulia.com/property/" + (this.propertyId());
        },
        showHome: function(rowId, eventCode) {
          var propertyId, row;
          row = $(TruliaKeyboard.ui.resultsEl).children()[rowId];
          propertyId = "#homevalue-marker-" + row.attributes['data-property-id'].value;
          TruliaKeyboard.state.setRow(parseInt(rowId, 10) + 1);
          if (row.attributes['class'].value.indexOf('hidden_row') !== -1) {
            TruliaKeyboard.helper.fireKeydownEvent(eventCode);
          } else {
            $(propertyId).click();
          }
        },
        clickElement: function(element, eventCode) {
          var el;
          el = $(element);
          el.click();
        },
        flashMessage: function(message) {
          var div, flashDiv, myDoc, style;
          myDoc = document;
          flashDiv = $('#flash');
          if (flashDiv.length === 0) {
            div = myDoc.createElement('div');
            style = 'display:none; text-align:center; margin-top:220px; color:green';
            div.id = 'flash';
            div.setAttribute('style', style);
            $(TruliaKeyboard.ui.infoBoxEl).after(div);
            flashDiv = $('#flash');
          }
          flashDiv.text(message).fadeIn('normal', function() {
            $(this).delay(3000).fadeOut();
          });
        }
      }
    };
    _tk = TruliaKeyboard;
    totalRows = $(_tk.ui.resultsEl).children().length;
    _tk.state.setRow(0);
    _tk.state.setTotalRows(totalRows);
    document.resultsUpdated = function(event) {
      totalRows = $(_tk.ui.resultsEl).children().length;
      _tk.state.setRow(0);
      _tk.state.setTotalRows(totalRows);
    };
    document.onkeydown = function(event) {
      var ESC, el, eventCode, h, j, k, l, n, r, rowId, y;
      eventCode = (event.keyCode != null ? event.keyCode : event.which);
      ESC = 27;
      r = 82;
      h = 72;
      l = 76;
      n = 78;
      k = 75;
      j = 74;
      y = 89;
      switch (eventCode) {
        case ESC:
          _tk.helper.clickElement(_tk.ui.closeWindowEl, eventCode);
          break;
        case r:
          _tk.state.setRow(0);
          _tk.helper.fireKeydownEvent(j);
          break;
        case h:
          _tk.helper.clickElement(_tk.ui.previousPhotoEl, eventCode);
          break;
        case l:
          _tk.helper.clickElement(_tk.ui.nextPhotoEl, eventCode);
          break;
        case n:
          _tk.helper.clickElement(_tk.ui.dislikeEl, eventCode);
          _tk.helper.fireKeydownEvent(j);
          break;
        case k:
          _tk.helper.showHome(_tk.state.getRow() - 2, eventCode);
          break;
        case y:
          _tk.helper.clickElement(_tk.ui.saveHomeEl, eventCode);
          _tk.helper.flashMessage('Property saved.');
          break;
        case j:
          rowId = _tk.state.getRow();
          el = $(_tk.ui.nextPageEl);
          if (rowId === _tk.state.getTotalRows()) {
            el.click();
          } else {
            _tk.helper.showHome(rowId, eventCode);
          }
          break;
        default:
          console.log('No event got caught');
      }
    };
  });

}).call(this);
